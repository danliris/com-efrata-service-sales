using Com.Danliris.Sales.Test.WebApi.Utils;
using Com.Danliris.Service.Sales.Lib.BusinessLogic.Interface.CostCalculationGarmentLogic;
using Com.Danliris.Service.Sales.Lib.BusinessLogic.Interface.ROGarmentInterface;
using Com.Danliris.Service.Sales.Lib.Models.ROGarments;
using Com.Danliris.Service.Sales.Lib.ViewModels;
using Com.Danliris.Service.Sales.Lib.ViewModels.CostCalculationGarment;
using Com.Danliris.Service.Sales.Lib.ViewModels.GarmentROViewModels;
using Com.Danliris.Service.Sales.WebApi.Controllers;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Xunit;

namespace Com.Danliris.Sales.Test.WebApi.Controllers
{
    public class RO_GarmentsControllerTest : BaseControllerTest<RO_GarmentsControllerprivate, RO_Garment, RO_GarmentViewModel, IROGarment>
    {
        [Fact]
        public void Get_PDF_Success()
        {
            var mocks = GetMocks();
            var vm = new RO_GarmentViewModel()
            {
                CostCalculationGarment = new CostCalculationGarmentViewModel()
                {
                    CostCalculationGarment_Materials = new List<CostCalculationGarment_MaterialViewModel>()
                    {
                        new CostCalculationGarment_MaterialViewModel()
                        {
                            Category = new CategoryViewModel()
                            {
                                name = "F",
                            },
                            Product = new GarmentProductViewModel(),
                            Quantity  = 1,
                            UOMQuantity = new UOMViewModel()
                        },
                        new CostCalculationGarment_MaterialViewModel()
                        {
                            Category = new CategoryViewModel()
                            {
                                name = "FABRIC",
                            },
                            Product = new GarmentProductViewModel(),
                            Quantity  = 1,
                            UOMQuantity = new UOMViewModel()
                        }
                    },
                    Unit = new UnitViewModel(),
                    Buyer = new BuyerViewModel(),
                    BuyerBrand = new BuyerBrandViewModel(),
                    UOM = new UOMViewModel(),
                    //ImageFile = ""
                },
                RO_Garment_SizeBreakdowns = new List<RO_Garment_SizeBreakdownViewModel>()
                {
                    new RO_Garment_SizeBreakdownViewModel()
                    {
                        SizeBreakdownIndex = 0,
                        Code = null,
                        Color = new ArticleColorViewModel(),
                        RO_Garment_SizeBreakdown_Details = new List<RO_Garment_SizeBreakdown_DetailViewModel>()
                        {
                            new RO_Garment_SizeBreakdown_DetailViewModel()
                            {
                                SizeBreakdownDetailIndex = 0,
                                Code = null,
                                Quantity = 1,
                            },
                            new RO_Garment_SizeBreakdown_DetailViewModel()
                            {
                                Quantity = 2
                            }
                        },
                        Total = 1
                    }
                },
                ImagesFile = new List<string>()
                {
                    "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAA0NDQ0ODQ4QEA4UFhMWFB4bGRkbHi0gIiAiIC1EKjIqKjIqRDxJOzc7STxsVUtLVWx9aWNpfZeHh5e+tb75+f8BDQ0NDQ4NDhAQDhQWExYUHhsZGRseLSAiICIgLUQqMioqMipEPEk7NztJPGxVS0tVbH1pY2l9l4eHl761vvn5///CABEIAAoACgMBIgACEQEDEQH/xAAVAAEBAAAAAAAAAAAAAAAAAAAAB//aAAgBAQAAAACnD//EABQBAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIQAAAAf//EABQBAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQMQAAAAf//EABQQAQAAAAAAAAAAAAAAAAAAACD/2gAIAQEAAT8AH//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIBAT8Af//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQMBAT8Af//Z",
                    null
                },
                ImagesName = new List<string>()
                {
                    "name"
                },
                ImagesPath = new List<string>()
                {
                    "D:/name.jpg"
                }
            };

            mocks.Facade.Setup(x => x.ReadByIdAsync(It.IsAny<int>())).ReturnsAsync(Model);

            mocks.Mapper.Setup(s => s.Map<RO_GarmentViewModel>(It.IsAny<RO_Garment>()))
                .Returns(vm);

            Mock<ICostCalculationGarment> mockCostCalculationGarment = new Mock<ICostCalculationGarment>();
            mockCostCalculationGarment.Setup(s => s.GetProductNames(It.IsAny<List<long>>()))
                .ReturnsAsync(new Dictionary<long, string>());

            mocks.ServiceProvider.Setup(s => s.GetService(typeof(ICostCalculationGarment)))
                .Returns(mockCostCalculationGarment.Object);

            var controller = GetController(mocks);
            var response = controller.GetPDF(1).Result;

            Assert.NotNull(response);

        }

        [Fact]
        public void Get_PDF_NotFound()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(x => x.ReadByIdAsync(It.IsAny<int>())).ReturnsAsync(default(RO_Garment));
            var controller = GetController(mocks);
            var response = controller.GetPDF(1).Result;

            int statusCode = this.GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.NotFound, statusCode);

        }

        [Fact]
        public void GetPDF_Return_BadRequest()
        {
            var mocks = GetMocks();
            var controller = GetController(mocks);
            controller.ModelState.AddModelError("key", "test");
            var response = controller.GetPDF(1).Result;

            int statusCode = this.GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.BadRequest, statusCode);

        }

        [Fact]
        public void Get_PDF_Exception()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(x => x.ReadByIdAsync(It.IsAny<int>())).ThrowsAsync(new Exception("error"));
            var controller = GetController(mocks);
            var response = controller.GetPDF(1).Result;

            int statusCode = this.GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.InternalServerError, statusCode);

        }

        [Fact]
        public async Task PostRO_Success_ReturnNoContent()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(f => f.PostRO(It.IsAny<List<long>>())).ReturnsAsync(1);

            var controller = GetController(mocks);
            var response = await controller.PostRO(It.IsAny<List<long>>());

            var statusCode = GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.NoContent, statusCode);
        }

        [Fact]
        public async Task PostRO_NoChanges_ReturnInternalServerError()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(f => f.PostRO(It.IsAny<List<long>>())).ReturnsAsync(0);

            var controller = GetController(mocks);
            var response = await controller.PostRO(It.IsAny<List<long>>());

            var statusCode = GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.InternalServerError, statusCode);
        }

        [Fact]
        public async Task PostRO_Failed_ReturnInternalServerError()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(f => f.PostRO(It.IsAny<List<long>>())).ThrowsAsync(new Exception(string.Empty));

            var controller = GetController(mocks);
            var response = await controller.PostRO(It.IsAny<List<long>>());

            var statusCode = GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.InternalServerError, statusCode);
        }

        [Fact]
        public async Task UnpostRO_Success_ReturnNoContent()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(f => f.UnpostRO(It.IsAny<long>())).ReturnsAsync(1);

            var controller = GetController(mocks);
            var response = await controller.UnpostRO(It.IsAny<long>());

            var statusCode = GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.NoContent, statusCode);
        }

        [Fact]
        public async Task UnpostRO_Failed_ReturnInternalServerError()
        {
            var mocks = GetMocks();
            mocks.Facade.Setup(f => f.UnpostRO(It.IsAny<long>())).ThrowsAsync(new Exception(string.Empty));

            var controller = GetController(mocks);
            var response = await controller.UnpostRO(It.IsAny<long>());

            var statusCode = GetStatusCode(response);
            Assert.Equal((int)HttpStatusCode.InternalServerError, statusCode);
        }

        [Fact]
        public void Validate_ViewModel()
        {
            RO_GarmentViewModel viewModel = new RO_GarmentViewModel
            {
                Total = 1,
                DocumentsFile = new List<string> { null, "aiueo" },
                RO_Garment_SizeBreakdowns = new List<RO_Garment_SizeBreakdownViewModel>
                {
                    new RO_Garment_SizeBreakdownViewModel
                    {
                        RO_Garment_SizeBreakdown_Details = new List<RO_Garment_SizeBreakdown_DetailViewModel>
                        {
                            new RO_Garment_SizeBreakdown_DetailViewModel()
                        }
                    }
                },
                DocumentsFileName = new List<string>
                {
                    null,
                    "FileName"
                }
            };

            var defaultValidationResult = viewModel.Validate(null);
            Assert.True(defaultValidationResult.Count() > 0);
        }
    }
}
